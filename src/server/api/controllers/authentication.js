/**
 * Generates a controller for a REST API endpoint.
 */
function generateToken (authentication, privateKey) {
  /**
   * Returns a `token` if the `privateKey` is valid.
   * Returns an `error` otherwise.
   *
   * ## Parameters
   *
   * | Name | Datatype | Description |
   * |------|----------|-------------|
   * | privateKey | string | Authentication secret private key. |
   */
  return function (req, res) {
    // Validation
    const submittedPrivateKey = req.body.privateKey
    if (submittedPrivateKey === undefined) {
      res.status(400)
      res.json({
        error: 'Private key is required.',
        code: 'REQUIRE_PRIVATEKEY'
      })
      return
    }
    // Response
    if (submittedPrivateKey === privateKey) {
      const ipAddress = req.connection.remoteAddress
      const token = authentication.generateToken(ipAddress)
      res.json({
        token
      })
    } else {
      res.status(400)
      res.json({
        error: 'Private key is invalid.',
        code: 'INVALID_PRIVATEKEY'
      })
    }
  }
}

/**
 * Generates a controller for a REST API endpoint.
 */
function validateToken (authentication, isStandalone) {
  /**
   * Returns whether or not the `Authorization` is valid.
   *
   * ## Headers
   *
   * | Name | Datatype | Description |
   * |------|----------|-------------|
   * | Authorization | string | Token that was generated by the server. |
   */
  return function (req, res, next) {
    // Validation
    let auth = req.header('Authorization')
    if (auth === undefined) {
      res.status(400)
      res.json({
        error: 'Authorization header is required.',
        code: 'REQUIRE_AUTH'
      })
      return
    }
    auth = auth.split(' ')
    const type = auth[0]
    if (type !== 'Bearer') {
      res.status(400)
      res.json({
        error: 'Authorization type must be Bearer.',
        code: 'INVALID_AUTH_TYPE'
      })
      return
    }
    const token = auth[1]
    if (token === undefined) {
      res.status(400)
      res.json({
        error: 'Authorization token is required.',
        code: 'REQUIRE_TOKEN'
      })
      return
    }
    // Response
    authentication.validateToken(token)
      .then(timestamp => {
        if (timestamp) {
          if (isStandalone) {
            res.json({
              timestamp
            })
          } else {
            next()
          }
        } else {
          res.status(400)
          res.json({
            error: 'Token is invalid.',
            code: 'INVALID_TOKEN'
          })
        }
      })
      .catch(error => {
        res.status(500)
        res.json({
          code: 'INTERNAL_ERROR'
        })
        console.error(error)
      })
  }
}

module.exports = {
  generateToken,
  validateToken
}
